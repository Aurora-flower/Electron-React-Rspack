# 包名 - 应用程序 ID --- 反向域名命名法（Reverse Domain Name Notation）
appId: website.huaying.electron-app

# 应用程序名称
productName: 花楹一间

# 应用程序版本 --- 默认为 package.json 的 version 字段
appImage:
  artifactName: ${productName}-${version}-${arch}.${ext}

# 设置应用程序图标
# icon: public/favicon.ico # 或者 .icns 格式，根据平台选择合适的图标格式 - least 512x512
icon: build/assets/app-icon/mac/icon.icns

# 版权
copyright: Copyright © 2025 ${productName} ${author}

# 是否从源代码构建应用程序本机依赖关系
buildDependenciesFromSource: true

# 构建资源目录
directories:
  # 应用程序目录 -- 决定被构建的应用程序目录。
  app: app

  # 资源路径 --- 用于指定构建过程中使用的资源目录。
  # 该目录中的文件在构建过程中会被用于生成安装包。这些文件可以包括图标、证书、配置文件等
  # [注意📢: 构建资源并未打包到应用程序中]
  # buildResources: core/build

  # 输出目录 --- 默认 build
  output: release/${version}

# 包含文件与目录 - 指定在复制文件以创建包时要包含哪些文件
files:
  # - '!.config/*'
  # - '!.husky/*'
  # - '!.vscode/*'
  # - '!backup/*'
  # - '!cache/*'
  # - '!gen/*'
  # - '!gulp/*'
  # - '!log/*'
  # - '!node_modules/*'
  # - '!public/*'
  # - '!release/*'
  # - '!source/*'
  # - '!temp/*'
  # - '!test/*'
  # - '!.git*'
  # - '!{.hintrc,.prettierignore,.prettierrc.js,electron-builder.yml,gulpfile.js,.gitmodules,plopfile.js,postcss.config.js}'
  # - '!*.config.{js,ts,mjs,cjs}'
  # - '!{README.md,README.zh-CN.md,todo.list,package-lock.json,tsconfig.json}'
  # - '!core/build'

# 启用 asar 打包 --- 默认为 True
asar: true

# 指定在创建 asar 存档时要解压缩哪些文件
asarUnpack:
  - '**/node_modules/fabric/**'
  - 'core'
# 在打包和签名之后（在打包成可分发格式之前）要运行的函数（或文件或模块id的路径）。设置与 `beforePack` 相同。
# afterPack: 'build/script/after-pack.js'
# DMG 选项
# dmg:
# 是否启用 DMG 签名
# sign: true
